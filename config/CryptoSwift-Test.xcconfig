//
// CryptoSwift-Test.xcconfig
//
// Generated by BuildSettingExtractor on 02/04/2018
// https://github.com/dempseyatgithub/BuildSettingExtractor
//

#include "CryptoSwift-Shared.xcconfig"


BITCODE_GENERATION_MODE = bitcode



// Unroll Loops
// 
// Unrolls loops. Unrolling makes the code larger, but may make it faster by reducing the
// number of branches executed.

GCC_UNROLL_LOOPS = YES



// Link-Time Optimization
// 
// Enabling this setting allows optimization across file boundaries during linking.
// 
// * *No:* Disabled. Do not use link-time optimization.
// * *Monolithic Link-Time Optimization:* This mode performs monolithic link-time
// optimization of binaries, combining all executable code into a single unit and running
// aggressive compiler optimizations.
// * *Incremental Link-Time Optimization:* This mode performs partitioned link-time
// optimization of binaries, inlining between compilation units and running aggressive
// compiler optimizations on each unit in parallel. This enables fast incremental builds
// and uses less memory than Monolithic LTO.

LLVM_LTO = YES



// Other Swift Flags
// 
// A list of additional flags to pass to the Swift compiler.

OTHER_SWIFT_FLAGS = $(inherited) -Xfrontend -debug-time-function-bodies



// Disable Safety Checks
// 
// Disable runtime safety checks when optimizing.

SWIFT_DISABLE_SAFETY_CHECKS = YES



// Exclusive Access to Memory
// 
// Enforce exclusive access to memory

SWIFT_ENFORCE_EXCLUSIVE_ACCESS = compile-time



// Swift Optimization Level
// 
// * *None:* Compile without any optimization. [-Onone]
// * *Optimize for Speed:* [-O]
// * *Optimize for Size:* [-Osize]
// * *Whole Module Optimization:* [-O -whole-module-optimization]

SWIFT_OPTIMIZATION_LEVEL = -O
