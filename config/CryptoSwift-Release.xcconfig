//
// CryptoSwift-Release.xcconfig
//
// Generated by BuildSettingExtractor on 02/04/2018
// https://github.com/dempseyatgithub/BuildSettingExtractor
//

#include "CryptoSwift-Shared.xcconfig"


BITCODE_GENERATION_MODE = bitcode



// Use Optimization Profile
// 
// When this setting is enabled, `clang` will use the optimization profile collected for
// a target when building it.

CLANG_USE_OPTIMIZATION_PROFILE = NO



// Generate Debug Symbols
// 
// Enables or disables generation of debug symbols. When debug symbols are enabled, the
// level of detail can be controlled by the `DEBUG_INFORMATION_FORMAT` setting.

GCC_GENERATE_DEBUGGING_SYMBOLS = NO



// Unroll Loops
// 
// Unrolls loops. Unrolling makes the code larger, but may make it faster by reducing the
// number of branches executed.

GCC_UNROLL_LOOPS = YES



// Link-Time Optimization
// 
// Enabling this setting allows optimization across file boundaries during linking.
// 
// * *No:* Disabled. Do not use link-time optimization.
// * *Monolithic Link-Time Optimization:* This mode performs monolithic link-time
// optimization of binaries, combining all executable code into a single unit and running
// aggressive compiler optimizations.
// * *Incremental Link-Time Optimization:* This mode performs partitioned link-time
// optimization of binaries, inlining between compilation units and running aggressive
// compiler optimizations on each unit in parallel. This enables fast incremental builds
// and uses less memory than Monolithic LTO.

LLVM_LTO = YES



// Disable Safety Checks
// 
// Disable runtime safety checks when optimizing.

SWIFT_DISABLE_SAFETY_CHECKS = YES



// Exclusive Access to Memory
// 
// Enforce exclusive access to memory

SWIFT_ENFORCE_EXCLUSIVE_ACCESS = compile-time



// Swift Optimization Level
// 
// * *None:* Compile without any optimization. [-Onone]
// * *Optimize for Speed:* [-O]
// * *Optimize for Size:* [-Osize]
// * *Whole Module Optimization:* [-O -whole-module-optimization]

SWIFT_OPTIMIZATION_LEVEL = -O
