//
// Project-Test.xcconfig
//
// Generated by BuildSettingExtractor on 02/04/2018
// https://github.com/dempseyatgithub/BuildSettingExtractor
//

#include "Project-Shared.xcconfig"


// Strip Debug Symbols During Copy
// 
// Specifies whether binary files that are copied during the build, such as in a Copy
// Bundle Resources or Copy Files build phase, should be stripped of debugging symbols.
// It does not cause the linked product of a target to be stripped—use
// `STRIP_INSTALLED_PRODUCT` for that.

COPY_PHASE_STRIP = NO



// Enable Foundation Assertions
// 
// Controls whether assertion logic provided by `NSAssert` is included in the
// preprocessed source code or is elided during preprocessing. Disabling assertions can
// improve code performance.

ENABLE_NS_ASSERTIONS = NO



// Enable Testability
// 
// When this setting is activated, the product will be built with options appropriate for
// running automated tests, such as making private interfaces accessible to the tests.
// This may result in tests running slower than they would without testability enabled.

ENABLE_TESTABILITY = YES



// Optimization Level
// 
// Specifies the degree to which the generated code is optimized for speed and binary
// size.
// 
// * *None:* Do not optimize. [-O0]
// With this setting, the compiler's goal is to reduce the cost of compilation and to
// make debugging produce the expected results. Statements are independent—if you stop
// the program with a breakpoint between statements, you can then assign a new value to
// any variable or change the program counter to any other statement in the function and
// get exactly the results you would expect from the source code.
// * *Fast:* Optimizing compilation takes somewhat more time, and a lot more memory for a
// large function. [-O1]
// With this setting, the compiler tries to reduce code size and execution time,
// without performing any optimizations that take a great deal of compilation time. In
// Apple's compiler, strict aliasing, block reordering, and inter-block scheduling are
// disabled by default when optimizing.
// * *Faster:* The compiler performs nearly all supported optimizations that do not
// involve a space-speed tradeoff. [-O2]
// With this setting, the compiler does not perform loop unrolling or function
// inlining, or register renaming. As compared to the `Fast` setting, this setting
// increases both compilation time and the performance of the generated code.
// * *Fastest:* Turns on all optimizations specified by the `Faster` setting and also
// turns on function inlining and register renaming options. This setting may result in a
// larger binary. [-O3]
// * *Fastest, Smallest:* Optimize for size. This setting enables all `Faster`
// optimizations that do not typically increase code size. It also performs further
// optimizations designed to reduce code size. [-Os]
// * *Fastest, Aggressive Optimizations:* This setting enables `Fastest` but also enables
// aggressive optimizations that may break strict standards compliance but should work
// well on well-behaved code. [-Ofast]

GCC_OPTIMIZATION_LEVEL = fast



// Preprocessor Macros
// 
// Space-separated list of preprocessor macros of the form `foo` or `foo=bar`.

GCC_PREPROCESSOR_DEFINITIONS = $(inherited) DEBUG=1 CI=1

// Active Compilation Conditions
//
// A list of compilation conditions to enable for conditional compilation expressions.

SWIFT_ACTIVE_COMPILATION_CONDITIONS = DEBUG



METAL_ENABLE_DEBUG_INFO = NO



// Build Active Architecture Only
// 
// If enabled, only the active architecture is built.

ONLY_ACTIVE_ARCH = YES



// Validate Built Product
// 
// If enabled, perform validation checks on the product as part of the build process.

VALIDATE_PRODUCT = YES
